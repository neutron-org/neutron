// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: neutron/harpoon/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Defines the Msg/ManageHookSubscription request type.
type MsgManageHookSubscription struct {
	// Address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Hook subscription to be updated.
	HookSubscription *HookSubscription `protobuf:"bytes,2,opt,name=hook_subscription,json=hookSubscription,proto3" json:"hook_subscription,omitempty"`
}

func (m *MsgManageHookSubscription) Reset()         { *m = MsgManageHookSubscription{} }
func (m *MsgManageHookSubscription) String() string { return proto.CompactTextString(m) }
func (*MsgManageHookSubscription) ProtoMessage()    {}
func (*MsgManageHookSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1e4561f349256, []int{0}
}
func (m *MsgManageHookSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgManageHookSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgManageHookSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgManageHookSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgManageHookSubscription.Merge(m, src)
}
func (m *MsgManageHookSubscription) XXX_Size() int {
	return m.Size()
}
func (m *MsgManageHookSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgManageHookSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_MsgManageHookSubscription proto.InternalMessageInfo

func (m *MsgManageHookSubscription) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgManageHookSubscription) GetHookSubscription() *HookSubscription {
	if m != nil {
		return m.HookSubscription
	}
	return nil
}

// Defines the response structure for executing a MsgManageHookSubscription message.
type MsgManageHookSubscriptionResponse struct {
}

func (m *MsgManageHookSubscriptionResponse) Reset()         { *m = MsgManageHookSubscriptionResponse{} }
func (m *MsgManageHookSubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgManageHookSubscriptionResponse) ProtoMessage()    {}
func (*MsgManageHookSubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1e4561f349256, []int{1}
}
func (m *MsgManageHookSubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgManageHookSubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgManageHookSubscriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgManageHookSubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgManageHookSubscriptionResponse.Merge(m, src)
}
func (m *MsgManageHookSubscriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgManageHookSubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgManageHookSubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgManageHookSubscriptionResponse proto.InternalMessageInfo

// Specifies new hook subscriptions for the contract_address.
type HookSubscription struct {
	// Contract address to update subscriptions for.
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// List of hooks to subscribe to. Hooks not listed here will be removed.
	Hooks []HookType `protobuf:"varint,3,rep,packed,name=hooks,proto3,enum=neutron.harpoon.HookType" json:"hooks,omitempty"`
}

func (m *HookSubscription) Reset()         { *m = HookSubscription{} }
func (m *HookSubscription) String() string { return proto.CompactTextString(m) }
func (*HookSubscription) ProtoMessage()    {}
func (*HookSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1e4561f349256, []int{2}
}
func (m *HookSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HookSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HookSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HookSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HookSubscription.Merge(m, src)
}
func (m *HookSubscription) XXX_Size() int {
	return m.Size()
}
func (m *HookSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_HookSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_HookSubscription proto.InternalMessageInfo

func (m *HookSubscription) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *HookSubscription) GetHooks() []HookType {
	if m != nil {
		return m.Hooks
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgManageHookSubscription)(nil), "neutron.harpoon.MsgManageHookSubscription")
	proto.RegisterType((*MsgManageHookSubscriptionResponse)(nil), "neutron.harpoon.MsgManageHookSubscriptionResponse")
	proto.RegisterType((*HookSubscription)(nil), "neutron.harpoon.HookSubscription")
}

func init() { proto.RegisterFile("neutron/harpoon/tx.proto", fileDescriptor_94a1e4561f349256) }

var fileDescriptor_94a1e4561f349256 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0xef, 0xd2, 0x40,
	0x18, 0xc6, 0x39, 0xc9, 0xdf, 0x84, 0x33, 0x11, 0x68, 0x88, 0x96, 0x9a, 0x34, 0x80, 0x0b, 0x36,
	0xa1, 0x17, 0xaa, 0x61, 0x70, 0x93, 0xc9, 0xc4, 0xe0, 0x50, 0x9c, 0x5c, 0x48, 0x29, 0xcd, 0xb5,
	0x21, 0xbd, 0xb7, 0xb9, 0xbb, 0x12, 0xd8, 0x8c, 0x83, 0x83, 0x93, 0x1f, 0x85, 0xc1, 0x0f, 0xe1,
	0x48, 0x9c, 0x74, 0x33, 0x30, 0xf0, 0x35, 0x0c, 0xed, 0x35, 0x98, 0x62, 0x93, 0xff, 0xd2, 0xde,
	0xbd, 0xcf, 0x73, 0xcf, 0xfb, 0xfe, 0x2e, 0x87, 0x75, 0x16, 0xa4, 0x92, 0x03, 0x23, 0xa1, 0xc7,
	0x13, 0x00, 0x46, 0xe4, 0xd6, 0x4e, 0x38, 0x48, 0xd0, 0x9a, 0x4a, 0xb1, 0x95, 0x62, 0xb4, 0xbd,
	0x38, 0x62, 0x40, 0xb2, 0x6f, 0xee, 0x31, 0x9e, 0xfa, 0x20, 0x62, 0x10, 0x24, 0x16, 0x94, 0x6c,
	0xc6, 0x97, 0x9f, 0x12, 0xba, 0xb9, 0xb0, 0xc8, 0x76, 0x24, 0xdf, 0x28, 0xa9, 0x43, 0x81, 0x42,
	0x5e, 0xbf, 0xac, 0x54, 0xf5, 0x59, 0x79, 0x8e, 0x10, 0x60, 0xad, 0x8e, 0x0c, 0x7e, 0x23, 0xdc,
	0x9d, 0x09, 0x3a, 0xf3, 0x98, 0x47, 0x83, 0xb7, 0x00, 0xeb, 0x79, 0xba, 0x14, 0x3e, 0x8f, 0x12,
	0x19, 0x01, 0xd3, 0x26, 0xb8, 0xe1, 0xa5, 0x32, 0x04, 0x1e, 0xc9, 0x9d, 0x8e, 0x7a, 0x68, 0xd8,
	0x98, 0xea, 0x3f, 0xbf, 0x8f, 0x3a, 0xaa, 0xeb, 0x9b, 0xd5, 0x8a, 0x07, 0x42, 0xcc, 0x25, 0x8f,
	0x18, 0x75, 0xaf, 0x56, 0xed, 0x3d, 0x6e, 0x5f, 0x9a, 0x2c, 0xc4, 0x3f, 0x61, 0xfa, 0x83, 0x1e,
	0x1a, 0x3e, 0x72, 0xfa, 0x76, 0x09, 0xde, 0x2e, 0x77, 0x75, 0x5b, 0x61, 0xa9, 0xf2, 0xfa, 0xd5,
	0xe7, 0xf3, 0xde, 0xba, 0xe6, 0x7f, 0x3d, 0xef, 0xad, 0x7e, 0x41, 0x53, 0x39, 0xfd, 0xe0, 0x39,
	0xee, 0x57, 0x8a, 0x6e, 0x20, 0x12, 0x60, 0x22, 0x18, 0x30, 0xdc, 0xba, 0xc1, 0x7e, 0x81, 0x5b,
	0x3e, 0x30, 0xc9, 0x3d, 0x5f, 0x2e, 0xbc, 0x9c, 0x31, 0x9b, 0xbe, 0xe1, 0x36, 0x8b, 0xba, 0x42,
	0xd7, 0x08, 0xbe, 0xcb, 0xae, 0x53, 0xaf, 0xf7, 0xea, 0xc3, 0xc7, 0x4e, 0xf7, 0xbf, 0x74, 0x1f,
	0x76, 0x49, 0xe0, 0xe6, 0x3e, 0xe7, 0x0b, 0xc2, 0xf5, 0x99, 0xa0, 0xda, 0x16, 0x3f, 0xa9, 0xb8,
	0x74, 0xeb, 0x26, 0xa3, 0x92, 0xc2, 0x70, 0xee, 0xef, 0x2d, 0x88, 0x8d, 0xbb, 0x4f, 0xe7, 0xbd,
	0x85, 0xa6, 0xef, 0x7e, 0x1c, 0x4d, 0x74, 0x38, 0x9a, 0xe8, 0xcf, 0xd1, 0x44, 0xdf, 0x4e, 0x66,
	0xed, 0x70, 0x32, 0x6b, 0xbf, 0x4e, 0x66, 0xed, 0xe3, 0x98, 0x46, 0x32, 0x4c, 0x97, 0xb6, 0x0f,
	0x31, 0x51, 0xf1, 0x23, 0xe0, 0xb4, 0x58, 0x93, 0xcd, 0x84, 0x6c, 0xaf, 0x8f, 0x7a, 0x97, 0x04,
	0x62, 0xf9, 0x30, 0x7b, 0x4d, 0x2f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x47, 0x73, 0xb0,
	0xf4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Updates hook subscriptions for a specific contract address.
	// To remove a subscription, pass an empty array to `hook_subscription.hooks`.
	// Can only be executed by the module's authority.
	ManageHookSubscription(ctx context.Context, in *MsgManageHookSubscription, opts ...grpc.CallOption) (*MsgManageHookSubscriptionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ManageHookSubscription(ctx context.Context, in *MsgManageHookSubscription, opts ...grpc.CallOption) (*MsgManageHookSubscriptionResponse, error) {
	out := new(MsgManageHookSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/neutron.harpoon.Msg/ManageHookSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Updates hook subscriptions for a specific contract address.
	// To remove a subscription, pass an empty array to `hook_subscription.hooks`.
	// Can only be executed by the module's authority.
	ManageHookSubscription(context.Context, *MsgManageHookSubscription) (*MsgManageHookSubscriptionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ManageHookSubscription(ctx context.Context, req *MsgManageHookSubscription) (*MsgManageHookSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageHookSubscription not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ManageHookSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgManageHookSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ManageHookSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.harpoon.Msg/ManageHookSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ManageHookSubscription(ctx, req.(*MsgManageHookSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "neutron.harpoon.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ManageHookSubscription",
			Handler:    _Msg_ManageHookSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "neutron/harpoon/tx.proto",
}

func (m *MsgManageHookSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgManageHookSubscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgManageHookSubscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HookSubscription != nil {
		{
			size, err := m.HookSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgManageHookSubscriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgManageHookSubscriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgManageHookSubscriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HookSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HookSubscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HookSubscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hooks) > 0 {
		dAtA3 := make([]byte, len(m.Hooks)*10)
		var j2 int
		for _, num := range m.Hooks {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTx(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgManageHookSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.HookSubscription != nil {
		l = m.HookSubscription.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgManageHookSubscriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HookSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Hooks) > 0 {
		l = 0
		for _, e := range m.Hooks {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgManageHookSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgManageHookSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgManageHookSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HookSubscription == nil {
				m.HookSubscription = &HookSubscription{}
			}
			if err := m.HookSubscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgManageHookSubscriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgManageHookSubscriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgManageHookSubscriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HookSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HookSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HookSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v HookType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= HookType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Hooks = append(m.Hooks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Hooks) == 0 {
					m.Hooks = make([]HookType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v HookType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= HookType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Hooks = append(m.Hooks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Hooks", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
