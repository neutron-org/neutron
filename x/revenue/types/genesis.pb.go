// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: neutron/revenue/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Defines the revenue module's genesis state.
type GenesisState struct {
	// Revenue module parameters.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// The current payment schedule. If nil, the module will use the respective payment schedule for
	// the payment schedule type specified in the params.
	PaymentSchedule *PaymentSchedule `protobuf:"bytes,2,opt,name=payment_schedule,json=paymentSchedule,proto3" json:"payment_schedule,omitempty"`
	// Revenue module list of validators.
	Validators []ValidatorInfo `protobuf:"bytes,3,rep,name=validators,proto3" json:"validators"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece0d8a368090adb, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetPaymentSchedule() *PaymentSchedule {
	if m != nil {
		return m.PaymentSchedule
	}
	return nil
}

func (m *GenesisState) GetValidators() []ValidatorInfo {
	if m != nil {
		return m.Validators
	}
	return nil
}

// A model that contains information specific to the currently active payment schedule. The oneof
// implementations define conditions for payment periods ending and track the progress of the
// current payment period. This is a module's state variable.
// The inner oneof must correspond with the respective payment schedule type defined in the module
// params. In runtime, on a mismatch due to e.g. MsgUpdateParams execution, the module will switch
// to the payment schedule that corresponds to the payment schedule type automatically.
type PaymentSchedule struct {
	// Types that are valid to be assigned to PaymentSchedule:
	//	*PaymentSchedule_MonthlyPaymentSchedule
	//	*PaymentSchedule_BlockBasedPaymentSchedule
	//	*PaymentSchedule_EmptyPaymentSchedule
	PaymentSchedule isPaymentSchedule_PaymentSchedule `protobuf_oneof:"payment_schedule"`
}

func (m *PaymentSchedule) Reset()         { *m = PaymentSchedule{} }
func (m *PaymentSchedule) String() string { return proto.CompactTextString(m) }
func (*PaymentSchedule) ProtoMessage()    {}
func (*PaymentSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece0d8a368090adb, []int{1}
}
func (m *PaymentSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentSchedule.Merge(m, src)
}
func (m *PaymentSchedule) XXX_Size() int {
	return m.Size()
}
func (m *PaymentSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentSchedule proto.InternalMessageInfo

type isPaymentSchedule_PaymentSchedule interface {
	isPaymentSchedule_PaymentSchedule()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PaymentSchedule_MonthlyPaymentSchedule struct {
	MonthlyPaymentSchedule *MonthlyPaymentSchedule `protobuf:"bytes,1,opt,name=monthly_payment_schedule,json=monthlyPaymentSchedule,proto3,oneof" json:"monthly_payment_schedule,omitempty"`
}
type PaymentSchedule_BlockBasedPaymentSchedule struct {
	BlockBasedPaymentSchedule *BlockBasedPaymentSchedule `protobuf:"bytes,2,opt,name=block_based_payment_schedule,json=blockBasedPaymentSchedule,proto3,oneof" json:"block_based_payment_schedule,omitempty"`
}
type PaymentSchedule_EmptyPaymentSchedule struct {
	EmptyPaymentSchedule *EmptyPaymentSchedule `protobuf:"bytes,3,opt,name=empty_payment_schedule,json=emptyPaymentSchedule,proto3,oneof" json:"empty_payment_schedule,omitempty"`
}

func (*PaymentSchedule_MonthlyPaymentSchedule) isPaymentSchedule_PaymentSchedule()    {}
func (*PaymentSchedule_BlockBasedPaymentSchedule) isPaymentSchedule_PaymentSchedule() {}
func (*PaymentSchedule_EmptyPaymentSchedule) isPaymentSchedule_PaymentSchedule()      {}

func (m *PaymentSchedule) GetPaymentSchedule() isPaymentSchedule_PaymentSchedule {
	if m != nil {
		return m.PaymentSchedule
	}
	return nil
}

func (m *PaymentSchedule) GetMonthlyPaymentSchedule() *MonthlyPaymentSchedule {
	if x, ok := m.GetPaymentSchedule().(*PaymentSchedule_MonthlyPaymentSchedule); ok {
		return x.MonthlyPaymentSchedule
	}
	return nil
}

func (m *PaymentSchedule) GetBlockBasedPaymentSchedule() *BlockBasedPaymentSchedule {
	if x, ok := m.GetPaymentSchedule().(*PaymentSchedule_BlockBasedPaymentSchedule); ok {
		return x.BlockBasedPaymentSchedule
	}
	return nil
}

func (m *PaymentSchedule) GetEmptyPaymentSchedule() *EmptyPaymentSchedule {
	if x, ok := m.GetPaymentSchedule().(*PaymentSchedule_EmptyPaymentSchedule); ok {
		return x.EmptyPaymentSchedule
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PaymentSchedule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PaymentSchedule_MonthlyPaymentSchedule)(nil),
		(*PaymentSchedule_BlockBasedPaymentSchedule)(nil),
		(*PaymentSchedule_EmptyPaymentSchedule)(nil),
	}
}

// Contains information about a validator.
type ValidatorInfo struct {
	// The validator's node operator address.
	ValOperAddress string `protobuf:"bytes,1,opt,name=val_oper_address,json=valOperAddress,proto3" json:"val_oper_address,omitempty"`
	// The number of blocks the validator has committed in the current payment period.
	CommitedBlocksInPeriod uint64 `protobuf:"varint,2,opt,name=commited_blocks_in_period,json=commitedBlocksInPeriod,proto3" json:"commited_blocks_in_period,omitempty"`
	// The number of oracle votes the validator has submitted in the current payment period.
	CommitedOracleVotesInPeriod uint64 `protobuf:"varint,3,opt,name=commited_oracle_votes_in_period,json=commitedOracleVotesInPeriod,proto3" json:"commited_oracle_votes_in_period,omitempty"`
	// The number of blocks the validator has remained in the active validator set for in the
	// current payment period.
	InActiveValsetForBlocksInPeriod uint64 `protobuf:"varint,4,opt,name=in_active_valset_for_blocks_in_period,json=inActiveValsetForBlocksInPeriod,proto3" json:"in_active_valset_for_blocks_in_period,omitempty"`
}

func (m *ValidatorInfo) Reset()         { *m = ValidatorInfo{} }
func (m *ValidatorInfo) String() string { return proto.CompactTextString(m) }
func (*ValidatorInfo) ProtoMessage()    {}
func (*ValidatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece0d8a368090adb, []int{2}
}
func (m *ValidatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorInfo.Merge(m, src)
}
func (m *ValidatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorInfo proto.InternalMessageInfo

func (m *ValidatorInfo) GetValOperAddress() string {
	if m != nil {
		return m.ValOperAddress
	}
	return ""
}

func (m *ValidatorInfo) GetCommitedBlocksInPeriod() uint64 {
	if m != nil {
		return m.CommitedBlocksInPeriod
	}
	return 0
}

func (m *ValidatorInfo) GetCommitedOracleVotesInPeriod() uint64 {
	if m != nil {
		return m.CommitedOracleVotesInPeriod
	}
	return 0
}

func (m *ValidatorInfo) GetInActiveValsetForBlocksInPeriod() uint64 {
	if m != nil {
		return m.InActiveValsetForBlocksInPeriod
	}
	return 0
}

// Represents a payment schedule where revenue payments are processed once a month.
type MonthlyPaymentSchedule struct {
	// The block height at which the current month started.
	CurrentMonthStartBlock uint64 `protobuf:"varint,1,opt,name=current_month_start_block,json=currentMonthStartBlock,proto3" json:"current_month_start_block,omitempty"`
	// The timestamp of the block at which the current month started.
	CurrentMonthStartBlockTs uint64 `protobuf:"varint,2,opt,name=current_month_start_block_ts,json=currentMonthStartBlockTs,proto3" json:"current_month_start_block_ts,omitempty"`
}

func (m *MonthlyPaymentSchedule) Reset()         { *m = MonthlyPaymentSchedule{} }
func (m *MonthlyPaymentSchedule) String() string { return proto.CompactTextString(m) }
func (*MonthlyPaymentSchedule) ProtoMessage()    {}
func (*MonthlyPaymentSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece0d8a368090adb, []int{3}
}
func (m *MonthlyPaymentSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonthlyPaymentSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonthlyPaymentSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonthlyPaymentSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonthlyPaymentSchedule.Merge(m, src)
}
func (m *MonthlyPaymentSchedule) XXX_Size() int {
	return m.Size()
}
func (m *MonthlyPaymentSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_MonthlyPaymentSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_MonthlyPaymentSchedule proto.InternalMessageInfo

func (m *MonthlyPaymentSchedule) GetCurrentMonthStartBlock() uint64 {
	if m != nil {
		return m.CurrentMonthStartBlock
	}
	return 0
}

func (m *MonthlyPaymentSchedule) GetCurrentMonthStartBlockTs() uint64 {
	if m != nil {
		return m.CurrentMonthStartBlockTs
	}
	return 0
}

// Represents a payment schedule where revenue payments are processed after a specified number
// of blocks.
type BlockBasedPaymentSchedule struct {
	// The number of blocks in each payment period.
	BlocksPerPeriod uint64 `protobuf:"varint,1,opt,name=blocks_per_period,json=blocksPerPeriod,proto3" json:"blocks_per_period,omitempty"`
	// The block height at which the current payment period started.
	CurrentPeriodStartBlock uint64 `protobuf:"varint,2,opt,name=current_period_start_block,json=currentPeriodStartBlock,proto3" json:"current_period_start_block,omitempty"`
}

func (m *BlockBasedPaymentSchedule) Reset()         { *m = BlockBasedPaymentSchedule{} }
func (m *BlockBasedPaymentSchedule) String() string { return proto.CompactTextString(m) }
func (*BlockBasedPaymentSchedule) ProtoMessage()    {}
func (*BlockBasedPaymentSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece0d8a368090adb, []int{4}
}
func (m *BlockBasedPaymentSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockBasedPaymentSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockBasedPaymentSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockBasedPaymentSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockBasedPaymentSchedule.Merge(m, src)
}
func (m *BlockBasedPaymentSchedule) XXX_Size() int {
	return m.Size()
}
func (m *BlockBasedPaymentSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockBasedPaymentSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_BlockBasedPaymentSchedule proto.InternalMessageInfo

func (m *BlockBasedPaymentSchedule) GetBlocksPerPeriod() uint64 {
	if m != nil {
		return m.BlocksPerPeriod
	}
	return 0
}

func (m *BlockBasedPaymentSchedule) GetCurrentPeriodStartBlock() uint64 {
	if m != nil {
		return m.CurrentPeriodStartBlock
	}
	return 0
}

// Represents a payment schedule where revenue is never distributed.
type EmptyPaymentSchedule struct {
}

func (m *EmptyPaymentSchedule) Reset()         { *m = EmptyPaymentSchedule{} }
func (m *EmptyPaymentSchedule) String() string { return proto.CompactTextString(m) }
func (*EmptyPaymentSchedule) ProtoMessage()    {}
func (*EmptyPaymentSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece0d8a368090adb, []int{5}
}
func (m *EmptyPaymentSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyPaymentSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyPaymentSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyPaymentSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyPaymentSchedule.Merge(m, src)
}
func (m *EmptyPaymentSchedule) XXX_Size() int {
	return m.Size()
}
func (m *EmptyPaymentSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyPaymentSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyPaymentSchedule proto.InternalMessageInfo

// Represents a data structure that tracks the cumulative price of an asset over the entire
// observation period, along with the last absolute asset price and the timestamp when this
// price was last recorded.
type RewardAssetPrice struct {
	// The cumulative price of the reward asset within the TWAP window. It is calculated as:
	// `cumulative_price_at_timestamp_t(n)` = `last_price_at_t(n-1)` * (t(n) - t(n-1)) + `cumulative_price_at_timestamp_t(n-1)`
	CumulativePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=cumulative_price,json=cumulativePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"cumulative_price"`
	// The price of the reward asset in reward quote asset that corresponds to the timestamp.
	AbsolutePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=absolute_price,json=absolutePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"absolute_price"`
	// The timestamp of the last update of the absolute and cumulative price.
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *RewardAssetPrice) Reset()         { *m = RewardAssetPrice{} }
func (m *RewardAssetPrice) String() string { return proto.CompactTextString(m) }
func (*RewardAssetPrice) ProtoMessage()    {}
func (*RewardAssetPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece0d8a368090adb, []int{6}
}
func (m *RewardAssetPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardAssetPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardAssetPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardAssetPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardAssetPrice.Merge(m, src)
}
func (m *RewardAssetPrice) XXX_Size() int {
	return m.Size()
}
func (m *RewardAssetPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardAssetPrice.DiscardUnknown(m)
}

var xxx_messageInfo_RewardAssetPrice proto.InternalMessageInfo

func (m *RewardAssetPrice) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "neutron.revenue.GenesisState")
	proto.RegisterType((*PaymentSchedule)(nil), "neutron.revenue.PaymentSchedule")
	proto.RegisterType((*ValidatorInfo)(nil), "neutron.revenue.ValidatorInfo")
	proto.RegisterType((*MonthlyPaymentSchedule)(nil), "neutron.revenue.MonthlyPaymentSchedule")
	proto.RegisterType((*BlockBasedPaymentSchedule)(nil), "neutron.revenue.BlockBasedPaymentSchedule")
	proto.RegisterType((*EmptyPaymentSchedule)(nil), "neutron.revenue.EmptyPaymentSchedule")
	proto.RegisterType((*RewardAssetPrice)(nil), "neutron.revenue.RewardAssetPrice")
}

func init() { proto.RegisterFile("neutron/revenue/genesis.proto", fileDescriptor_ece0d8a368090adb) }

var fileDescriptor_ece0d8a368090adb = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x41, 0x6b, 0xe3, 0x46,
	0x18, 0xb5, 0xe2, 0x10, 0xc8, 0xa4, 0x89, 0x1d, 0x61, 0x1c, 0x3b, 0x71, 0xed, 0xe0, 0x12, 0x6a,
	0x0c, 0xb6, 0x48, 0x4a, 0x0b, 0xa5, 0x50, 0x88, 0x71, 0xdb, 0x84, 0xb4, 0x8d, 0x91, 0x4b, 0x28,
	0xa5, 0x30, 0x8c, 0xa5, 0x89, 0x2d, 0x22, 0x69, 0xc4, 0xcc, 0x48, 0xad, 0xef, 0x85, 0x1e, 0x5b,
	0xe8, 0xb5, 0xc7, 0xfd, 0x01, 0xcb, 0x92, 0x1f, 0x91, 0x63, 0xc8, 0x29, 0xec, 0x21, 0x84, 0xe4,
	0xb0, 0xfb, 0x33, 0x16, 0xcd, 0x8c, 0x92, 0x58, 0x96, 0x2f, 0x7b, 0x31, 0xd2, 0xf7, 0xbd, 0xef,
	0xcd, 0xfb, 0x9e, 0x9e, 0x2c, 0xf0, 0xa9, 0x8f, 0x43, 0x4e, 0x89, 0x6f, 0x50, 0x1c, 0x61, 0x3f,
	0xc4, 0xc6, 0x18, 0xfb, 0x98, 0x39, 0xac, 0x1b, 0x50, 0xc2, 0x89, 0x5e, 0x50, 0xed, 0xae, 0x6a,
	0x6f, 0x6f, 0x22, 0xcf, 0xf1, 0x89, 0x21, 0x7e, 0x25, 0x66, 0xbb, 0x6a, 0x11, 0xe6, 0x11, 0x06,
	0xc5, 0x9d, 0x21, 0x6f, 0x54, 0xab, 0x34, 0x26, 0x63, 0x22, 0xeb, 0xf1, 0x95, 0xaa, 0xd6, 0xd2,
	0x67, 0x06, 0x88, 0x22, 0x4f, 0xcd, 0x34, 0x6f, 0x35, 0xf0, 0xc9, 0x0f, 0x52, 0xc4, 0x90, 0x23,
	0x8e, 0xf5, 0x2f, 0xc1, 0x8a, 0x04, 0x54, 0xb4, 0x5d, 0xad, 0xb5, 0x76, 0xb0, 0xd5, 0x4d, 0x89,
	0xea, 0x0e, 0x44, 0xbb, 0xb7, 0x7c, 0x75, 0xd7, 0xc8, 0x99, 0x0a, 0xac, 0x9f, 0x80, 0x62, 0x80,
	0xa6, 0x1e, 0xf6, 0x39, 0x64, 0xd6, 0x04, 0xdb, 0xa1, 0x8b, 0x2b, 0x4b, 0x82, 0x60, 0x37, 0x83,
	0x40, 0x00, 0x87, 0x0a, 0x67, 0x16, 0x82, 0xd9, 0x82, 0xde, 0x07, 0x20, 0x42, 0xae, 0x63, 0x23,
	0x4e, 0x28, 0xab, 0xe4, 0x77, 0xf3, 0xad, 0xb5, 0x83, 0xfa, 0x1c, 0xcd, 0x59, 0x02, 0x39, 0xf6,
	0xcf, 0x89, 0x92, 0xf3, 0x62, 0xae, 0x79, 0x9f, 0x07, 0x85, 0xd4, 0x51, 0xfa, 0x3f, 0x1a, 0xa8,
	0x78, 0xc4, 0xe7, 0x13, 0x77, 0x0a, 0xe7, 0xf4, 0xca, 0x85, 0x3f, 0x9f, 0x3b, 0xe8, 0x27, 0x39,
	0x90, 0xe2, 0xea, 0xb5, 0xdf, 0xbc, 0x7b, 0xdd, 0xde, 0x4b, 0x5c, 0x95, 0xae, 0x18, 0xd9, 0xd8,
	0xa3, 0x9c, 0x59, 0xf6, 0x32, 0x3b, 0xfa, 0xff, 0x1a, 0xa8, 0x8d, 0x5c, 0x62, 0x5d, 0xc0, 0x11,
	0x62, 0xd8, 0x86, 0x0b, 0x5c, 0x6c, 0xcf, 0xa9, 0xea, 0xc5, 0x43, 0xbd, 0x78, 0x26, 0x2d, 0xac,
	0x13, 0x0b, 0x6b, 0xa5, 0x84, 0x2d, 0x84, 0x1f, 0xe5, 0xcc, 0xea, 0x68, 0x51, 0x53, 0xff, 0x5b,
	0x03, 0x65, 0xec, 0x05, 0x3c, 0xc3, 0xae, 0xbc, 0x10, 0xb6, 0x37, 0x27, 0xec, 0xbb, 0x18, 0x9e,
	0xd6, 0xd4, 0x8a, 0x35, 0x7d, 0x96, 0xd2, 0x94, 0x85, 0x3c, 0xca, 0x99, 0x25, 0x9c, 0xc5, 0xa0,
	0xcf, 0x27, 0xac, 0xf9, 0x6a, 0x09, 0xac, 0xcf, 0xc4, 0x40, 0xef, 0x81, 0x62, 0x84, 0x5c, 0x48,
	0x02, 0x4c, 0x21, 0xb2, 0x6d, 0x8a, 0x99, 0x0c, 0xf2, 0x6a, 0xaf, 0x72, 0x73, 0xd9, 0x29, 0xa9,
	0xf7, 0xe5, 0x50, 0x76, 0x86, 0x9c, 0x3a, 0xfe, 0xd8, 0xdc, 0x88, 0x90, 0x7b, 0x1a, 0x60, 0xaa,
	0xaa, 0xfa, 0xd7, 0xa0, 0x6a, 0x11, 0xcf, 0x73, 0x38, 0xb6, 0xa1, 0x70, 0x86, 0x41, 0xc7, 0x87,
	0x01, 0xa6, 0x0e, 0xb1, 0xc5, 0xe3, 0x58, 0x36, 0xcb, 0x09, 0x40, 0xd8, 0xca, 0x8e, 0xfd, 0x81,
	0xe8, 0xea, 0x7d, 0xd0, 0x78, 0x1a, 0x25, 0x14, 0x59, 0x2e, 0x86, 0x11, 0xe1, 0xf8, 0x25, 0x41,
	0x5e, 0x10, 0xec, 0x24, 0xb0, 0x53, 0x81, 0x3a, 0x8b, 0x41, 0x4f, 0x2c, 0x3f, 0x83, 0x3d, 0xc7,
	0x87, 0xc8, 0xe2, 0x4e, 0x84, 0x61, 0x84, 0x5c, 0x86, 0x39, 0x3c, 0x27, 0x74, 0x5e, 0xcc, 0xb2,
	0xe0, 0x6a, 0x38, 0xfe, 0xa1, 0xc0, 0x9e, 0x09, 0xe8, 0xf7, 0x84, 0xce, 0xaa, 0x6a, 0xfe, 0xa7,
	0x81, 0x72, 0x76, 0x30, 0xc5, 0xae, 0x21, 0xa5, 0xb1, 0xab, 0x22, 0xa0, 0x90, 0x71, 0x44, 0xb9,
	0x3c, 0x49, 0x18, 0x17, 0xef, 0x2a, 0x01, 0x82, 0x61, 0x18, 0xb7, 0x05, 0xbd, 0xfe, 0x2d, 0xa8,
	0x2d, 0x1c, 0x85, 0x9c, 0x29, 0xa7, 0x2a, 0xd9, 0xd3, 0xbf, 0xb0, 0xe6, 0x5f, 0x1a, 0xa8, 0x2e,
	0x4c, 0xa5, 0xde, 0x06, 0x9b, 0x6a, 0xdd, 0xf8, 0x51, 0xaa, 0x7d, 0xa5, 0xa0, 0x82, 0x6c, 0x0c,
	0x30, 0x55, 0x7e, 0x7d, 0x03, 0xb6, 0x13, 0x25, 0x12, 0x38, 0xb3, 0x85, 0xd4, 0xb1, 0xa5, 0x10,
	0x72, 0xe4, 0x59, 0x48, 0xb3, 0x0c, 0x4a, 0x59, 0x39, 0x6c, 0xbe, 0xd7, 0x40, 0xd1, 0xc4, 0x7f,
	0x20, 0x6a, 0x1f, 0x32, 0x86, 0xf9, 0x80, 0x3a, 0x16, 0xd6, 0x7f, 0x07, 0x45, 0x2b, 0xf4, 0x42,
	0x17, 0x89, 0x47, 0x13, 0xc4, 0x35, 0x15, 0xaf, 0xfd, 0xf8, 0xff, 0xe7, 0xed, 0x5d, 0x63, 0x47,
	0x46, 0x8c, 0xd9, 0x17, 0x5d, 0x87, 0x18, 0x1e, 0xe2, 0x93, 0xee, 0x8f, 0x78, 0x8c, 0xac, 0x69,
	0x1f, 0x5b, 0x37, 0x97, 0x1d, 0xa0, 0x12, 0xd8, 0xc7, 0x96, 0x59, 0x78, 0xa6, 0x92, 0xec, 0xbf,
	0x82, 0x0d, 0x34, 0x62, 0xc4, 0x0d, 0x79, 0xc2, 0xbd, 0xf4, 0xb1, 0xdc, 0xeb, 0x09, 0x91, 0x64,
	0xae, 0x81, 0x55, 0xee, 0x78, 0x98, 0x71, 0xe4, 0x05, 0x22, 0x81, 0x79, 0xf3, 0xb9, 0xd0, 0x3b,
	0xb9, 0x7a, 0xa8, 0x6b, 0xd7, 0x0f, 0x75, 0xed, 0xfe, 0xa1, 0xae, 0xfd, 0xfb, 0x58, 0xcf, 0x5d,
	0x3f, 0xd6, 0x73, 0xb7, 0x8f, 0xf5, 0xdc, 0x6f, 0xfb, 0x63, 0x87, 0x4f, 0xc2, 0x51, 0xd7, 0x22,
	0x9e, 0xa1, 0xde, 0xf3, 0x0e, 0xa1, 0xe3, 0xe4, 0xda, 0x88, 0xbe, 0x32, 0xfe, 0x7c, 0xfa, 0xb0,
	0xf0, 0x69, 0x80, 0xd9, 0x68, 0x45, 0x7c, 0x58, 0xbe, 0xf8, 0x10, 0x00, 0x00, 0xff, 0xff, 0x42,
	0x0e, 0x94, 0x93, 0xec, 0x06, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PaymentSchedule != nil {
		{
			size, err := m.PaymentSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PaymentSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PaymentSchedule != nil {
		{
			size := m.PaymentSchedule.Size()
			i -= size
			if _, err := m.PaymentSchedule.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PaymentSchedule_MonthlyPaymentSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentSchedule_MonthlyPaymentSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MonthlyPaymentSchedule != nil {
		{
			size, err := m.MonthlyPaymentSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PaymentSchedule_BlockBasedPaymentSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentSchedule_BlockBasedPaymentSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockBasedPaymentSchedule != nil {
		{
			size, err := m.BlockBasedPaymentSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PaymentSchedule_EmptyPaymentSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentSchedule_EmptyPaymentSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EmptyPaymentSchedule != nil {
		{
			size, err := m.EmptyPaymentSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ValidatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InActiveValsetForBlocksInPeriod != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.InActiveValsetForBlocksInPeriod))
		i--
		dAtA[i] = 0x20
	}
	if m.CommitedOracleVotesInPeriod != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CommitedOracleVotesInPeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.CommitedBlocksInPeriod != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CommitedBlocksInPeriod))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValOperAddress) > 0 {
		i -= len(m.ValOperAddress)
		copy(dAtA[i:], m.ValOperAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ValOperAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MonthlyPaymentSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonthlyPaymentSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonthlyPaymentSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentMonthStartBlockTs != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CurrentMonthStartBlockTs))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrentMonthStartBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CurrentMonthStartBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockBasedPaymentSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockBasedPaymentSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockBasedPaymentSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentPeriodStartBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CurrentPeriodStartBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.BlocksPerPeriod != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BlocksPerPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EmptyPaymentSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyPaymentSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyPaymentSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RewardAssetPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardAssetPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardAssetPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.AbsolutePrice.Size()
		i -= size
		if _, err := m.AbsolutePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CumulativePrice.Size()
		i -= size
		if _, err := m.CumulativePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.PaymentSchedule != nil {
		l = m.PaymentSchedule.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *PaymentSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaymentSchedule != nil {
		n += m.PaymentSchedule.Size()
	}
	return n
}

func (m *PaymentSchedule_MonthlyPaymentSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MonthlyPaymentSchedule != nil {
		l = m.MonthlyPaymentSchedule.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}
func (m *PaymentSchedule_BlockBasedPaymentSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockBasedPaymentSchedule != nil {
		l = m.BlockBasedPaymentSchedule.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}
func (m *PaymentSchedule_EmptyPaymentSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmptyPaymentSchedule != nil {
		l = m.EmptyPaymentSchedule.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}
func (m *ValidatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValOperAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.CommitedBlocksInPeriod != 0 {
		n += 1 + sovGenesis(uint64(m.CommitedBlocksInPeriod))
	}
	if m.CommitedOracleVotesInPeriod != 0 {
		n += 1 + sovGenesis(uint64(m.CommitedOracleVotesInPeriod))
	}
	if m.InActiveValsetForBlocksInPeriod != 0 {
		n += 1 + sovGenesis(uint64(m.InActiveValsetForBlocksInPeriod))
	}
	return n
}

func (m *MonthlyPaymentSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentMonthStartBlock != 0 {
		n += 1 + sovGenesis(uint64(m.CurrentMonthStartBlock))
	}
	if m.CurrentMonthStartBlockTs != 0 {
		n += 1 + sovGenesis(uint64(m.CurrentMonthStartBlockTs))
	}
	return n
}

func (m *BlockBasedPaymentSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlocksPerPeriod != 0 {
		n += 1 + sovGenesis(uint64(m.BlocksPerPeriod))
	}
	if m.CurrentPeriodStartBlock != 0 {
		n += 1 + sovGenesis(uint64(m.CurrentPeriodStartBlock))
	}
	return n
}

func (m *EmptyPaymentSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RewardAssetPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CumulativePrice.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.AbsolutePrice.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.Timestamp != 0 {
		n += 1 + sovGenesis(uint64(m.Timestamp))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentSchedule == nil {
				m.PaymentSchedule = &PaymentSchedule{}
			}
			if err := m.PaymentSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, ValidatorInfo{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthlyPaymentSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MonthlyPaymentSchedule{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PaymentSchedule = &PaymentSchedule_MonthlyPaymentSchedule{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockBasedPaymentSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockBasedPaymentSchedule{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PaymentSchedule = &PaymentSchedule_BlockBasedPaymentSchedule{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmptyPaymentSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmptyPaymentSchedule{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PaymentSchedule = &PaymentSchedule_EmptyPaymentSchedule{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValOperAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValOperAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitedBlocksInPeriod", wireType)
			}
			m.CommitedBlocksInPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitedBlocksInPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitedOracleVotesInPeriod", wireType)
			}
			m.CommitedOracleVotesInPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitedOracleVotesInPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InActiveValsetForBlocksInPeriod", wireType)
			}
			m.InActiveValsetForBlocksInPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InActiveValsetForBlocksInPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonthlyPaymentSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthlyPaymentSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthlyPaymentSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentMonthStartBlock", wireType)
			}
			m.CurrentMonthStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentMonthStartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentMonthStartBlockTs", wireType)
			}
			m.CurrentMonthStartBlockTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentMonthStartBlockTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockBasedPaymentSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockBasedPaymentSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockBasedPaymentSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerPeriod", wireType)
			}
			m.BlocksPerPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPeriodStartBlock", wireType)
			}
			m.CurrentPeriodStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPeriodStartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyPaymentSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyPaymentSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyPaymentSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardAssetPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardAssetPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardAssetPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CumulativePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbsolutePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AbsolutePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
