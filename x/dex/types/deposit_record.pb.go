// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: neutron/dex/deposit_record.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DepositRecord struct {
	PairId          *PairID                `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	SharesOwned     cosmossdk_io_math.Int  `protobuf:"bytes,2,opt,name=shares_owned,json=sharesOwned,proto3,customtype=cosmossdk.io/math.Int" json:"shares_owned" yaml:"shares_owned"`
	CenterTickIndex int64                  `protobuf:"varint,3,opt,name=center_tick_index,json=centerTickIndex,proto3" json:"center_tick_index,omitempty"`
	LowerTickIndex  int64                  `protobuf:"varint,4,opt,name=lower_tick_index,json=lowerTickIndex,proto3" json:"lower_tick_index,omitempty"`
	UpperTickIndex  int64                  `protobuf:"varint,5,opt,name=upper_tick_index,json=upperTickIndex,proto3" json:"upper_tick_index,omitempty"`
	Fee             uint64                 `protobuf:"varint,6,opt,name=fee,proto3" json:"fee,omitempty"`
	TotalShares     *cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=total_shares,json=totalShares,proto3,customtype=cosmossdk.io/math.Int" json:"total_shares" yaml:"total_shares"`
	Pool            *Pool                  `protobuf:"bytes,8,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *DepositRecord) Reset()         { *m = DepositRecord{} }
func (m *DepositRecord) String() string { return proto.CompactTextString(m) }
func (*DepositRecord) ProtoMessage()    {}
func (*DepositRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_250413eadaebbf28, []int{0}
}
func (m *DepositRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositRecord.Merge(m, src)
}
func (m *DepositRecord) XXX_Size() int {
	return m.Size()
}
func (m *DepositRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DepositRecord proto.InternalMessageInfo

func (m *DepositRecord) GetPairId() *PairID {
	if m != nil {
		return m.PairId
	}
	return nil
}

func (m *DepositRecord) GetCenterTickIndex() int64 {
	if m != nil {
		return m.CenterTickIndex
	}
	return 0
}

func (m *DepositRecord) GetLowerTickIndex() int64 {
	if m != nil {
		return m.LowerTickIndex
	}
	return 0
}

func (m *DepositRecord) GetUpperTickIndex() int64 {
	if m != nil {
		return m.UpperTickIndex
	}
	return 0
}

func (m *DepositRecord) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *DepositRecord) GetPool() *Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func init() {
	proto.RegisterType((*DepositRecord)(nil), "neutron.dex.DepositRecord")
}

func init() { proto.RegisterFile("neutron/dex/deposit_record.proto", fileDescriptor_250413eadaebbf28) }

var fileDescriptor_250413eadaebbf28 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x3f, 0x8f, 0x94, 0x40,
	0x18, 0xc6, 0x19, 0xc1, 0x3d, 0x1d, 0xfc, 0x73, 0xc7, 0xa9, 0xc1, 0x2d, 0x80, 0x50, 0x11, 0xf5,
	0x20, 0xd1, 0xc4, 0xc2, 0x72, 0xb3, 0x89, 0xa1, 0xd2, 0xa0, 0x95, 0x0d, 0xe1, 0x98, 0x91, 0x9d,
	0x2c, 0xf0, 0x92, 0x61, 0xd6, 0xe3, 0xbe, 0x85, 0x1f, 0xeb, 0x2a, 0x73, 0xa5, 0xb1, 0x20, 0x66,
	0xb7, 0xb3, 0xf4, 0x13, 0x98, 0x19, 0xd0, 0x83, 0xc6, 0xee, 0x7d, 0x9f, 0xf9, 0xbd, 0xf3, 0xcc,
	0x93, 0x77, 0xb0, 0x57, 0xd3, 0x9d, 0xe0, 0x50, 0x47, 0x84, 0x76, 0x11, 0xa1, 0x0d, 0xb4, 0x4c,
	0xa4, 0x9c, 0xe6, 0xc0, 0x49, 0xd8, 0x70, 0x10, 0x60, 0x99, 0x23, 0x11, 0x12, 0xda, 0x2d, 0x1f,
	0x15, 0x50, 0x80, 0xd2, 0x23, 0x59, 0x0d, 0xc8, 0xf2, 0xe9, 0xf4, 0x92, 0x26, 0x63, 0x3c, 0x65,
	0xe3, 0xf4, 0xf2, 0xc9, 0xec, 0x08, 0xa0, 0x1c, 0x74, 0xff, 0x9b, 0x8e, 0xef, 0xaf, 0x07, 0xbb,
	0x44, 0xb9, 0x59, 0x2f, 0xf0, 0xd1, 0x38, 0x6a, 0x23, 0x0f, 0x05, 0xe6, 0xcb, 0xd3, 0x70, 0xe2,
	0x1c, 0xbe, 0xcf, 0x18, 0x8f, 0xd7, 0xc9, 0x42, 0x32, 0x31, 0xb1, 0x0a, 0x7c, 0xaf, 0xdd, 0x64,
	0x9c, 0xb6, 0x29, 0x5c, 0xd4, 0x94, 0xd8, 0xb7, 0x3c, 0x14, 0xdc, 0x5d, 0xad, 0xaf, 0x7a, 0x57,
	0xfb, 0xd1, 0xbb, 0x8f, 0x73, 0x68, 0x2b, 0x68, 0x5b, 0xb2, 0x0d, 0x19, 0x44, 0x55, 0x26, 0x36,
	0x61, 0x5c, 0x8b, 0x5f, 0xbd, 0x3b, 0x1b, 0xfa, 0xdd, 0xbb, 0xa7, 0x97, 0x59, 0x55, 0xbe, 0xf1,
	0xa7, 0xaa, 0x9f, 0x98, 0x43, 0xfb, 0x4e, 0x76, 0xd6, 0x33, 0x7c, 0x92, 0xd3, 0x5a, 0x50, 0x9e,
	0x0a, 0x96, 0x6f, 0x53, 0x56, 0x13, 0xda, 0xd9, 0xba, 0x87, 0x02, 0x3d, 0x79, 0x38, 0x1c, 0x7c,
	0x64, 0xf9, 0x36, 0x96, 0xb2, 0x15, 0xe0, 0xe3, 0x12, 0x2e, 0xe6, 0xa8, 0xa1, 0xd0, 0x07, 0x4a,
	0x9f, 0x91, 0xbb, 0xa6, 0x99, 0x93, 0xb7, 0x07, 0x52, 0xe9, 0x37, 0xe4, 0x31, 0xd6, 0x3f, 0x53,
	0x6a, 0x2f, 0x3c, 0x14, 0x18, 0x89, 0x2c, 0x65, 0x74, 0x01, 0x22, 0x2b, 0xd3, 0xe1, 0x99, 0xf6,
	0xd1, 0xbf, 0xe8, 0xe8, 0xbf, 0xd1, 0xa7, 0x43, 0x37, 0xd1, 0xa7, 0xaa, 0x9f, 0x98, 0xaa, 0xfd,
	0xa0, 0x3a, 0xeb, 0x39, 0x36, 0xe4, 0xc6, 0xec, 0x3b, 0x6a, 0x1d, 0x27, 0xf3, 0x75, 0x00, 0x94,
	0x2b, 0x43, 0x7a, 0x26, 0x0a, 0x5a, 0xbd, 0xbd, 0xda, 0x3b, 0xe8, 0x7a, 0xef, 0xa0, 0x9f, 0x7b,
	0x07, 0x7d, 0x3d, 0x38, 0xda, 0xf5, 0xc1, 0xd1, 0xbe, 0x1f, 0x1c, 0xed, 0xd3, 0x59, 0xc1, 0xc4,
	0x66, 0x77, 0x1e, 0xe6, 0x50, 0x45, 0xe3, 0x15, 0x67, 0xc0, 0x8b, 0xbf, 0x75, 0xf4, 0xe5, 0x75,
	0xd4, 0xa9, 0xef, 0x21, 0x2e, 0x1b, 0xda, 0x9e, 0x2f, 0xd4, 0x07, 0x79, 0xf5, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x2e, 0xa9, 0x18, 0xa7, 0x9a, 0x02, 0x00, 0x00,
}

func (m *DepositRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDepositRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TotalShares != nil {
		{
			size := m.TotalShares.Size()
			i -= size
			if _, err := m.TotalShares.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintDepositRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Fee != 0 {
		i = encodeVarintDepositRecord(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x30
	}
	if m.UpperTickIndex != 0 {
		i = encodeVarintDepositRecord(dAtA, i, uint64(m.UpperTickIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.LowerTickIndex != 0 {
		i = encodeVarintDepositRecord(dAtA, i, uint64(m.LowerTickIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.CenterTickIndex != 0 {
		i = encodeVarintDepositRecord(dAtA, i, uint64(m.CenterTickIndex))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.SharesOwned.Size()
		i -= size
		if _, err := m.SharesOwned.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDepositRecord(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PairId != nil {
		{
			size, err := m.PairId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDepositRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDepositRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovDepositRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DepositRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PairId != nil {
		l = m.PairId.Size()
		n += 1 + l + sovDepositRecord(uint64(l))
	}
	l = m.SharesOwned.Size()
	n += 1 + l + sovDepositRecord(uint64(l))
	if m.CenterTickIndex != 0 {
		n += 1 + sovDepositRecord(uint64(m.CenterTickIndex))
	}
	if m.LowerTickIndex != 0 {
		n += 1 + sovDepositRecord(uint64(m.LowerTickIndex))
	}
	if m.UpperTickIndex != 0 {
		n += 1 + sovDepositRecord(uint64(m.UpperTickIndex))
	}
	if m.Fee != 0 {
		n += 1 + sovDepositRecord(uint64(m.Fee))
	}
	if m.TotalShares != nil {
		l = m.TotalShares.Size()
		n += 1 + l + sovDepositRecord(uint64(l))
	}
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovDepositRecord(uint64(l))
	}
	return n
}

func sovDepositRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDepositRecord(x uint64) (n int) {
	return sovDepositRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DepositRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepositRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepositRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDepositRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDepositRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PairId == nil {
				m.PairId = &PairID{}
			}
			if err := m.PairId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesOwned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepositRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepositRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepositRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesOwned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CenterTickIndex", wireType)
			}
			m.CenterTickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepositRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CenterTickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerTickIndex", wireType)
			}
			m.LowerTickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepositRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerTickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperTickIndex", wireType)
			}
			m.UpperTickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepositRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperTickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepositRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepositRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepositRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepositRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.TotalShares = &v
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepositRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDepositRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDepositRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &Pool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepositRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepositRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDepositRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDepositRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDepositRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDepositRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDepositRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDepositRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDepositRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDepositRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDepositRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDepositRecord = fmt.Errorf("proto: unexpected end of group")
)
