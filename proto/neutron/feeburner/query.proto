syntax = "proto3";
package neutron.feeburner;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "neutron/feeburner/params.proto";
import "neutron/feeburner/total_burned_neutrons_amount.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/neutron-org/neutron/v5/x/feeburner/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/neutron/feeburner/params";
  }

  // TotalBurnedNeutronsAmount queries total amount of burned neutron fees.
  rpc TotalBurnedNeutronsAmount(QueryTotalBurnedNeutronsAmountRequest) returns (QueryTotalBurnedNeutronsAmountResponse) {
    option (google.api.http).get = "/neutron/feeburner/total_burned_neutrons_amount";
  }
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryTotalBurnedNeutronsAmountRequest is request type for the
// Query/QueryTotalBurnedNeutronsAmount method.
message QueryTotalBurnedNeutronsAmountRequest {}

// QueryTotalBurnedNeutronsAmountResponse is response type for the
// Query/QueryTotalBurnedNeutronsAmount method.
message QueryTotalBurnedNeutronsAmountResponse {
  TotalBurnedNeutronsAmount total_burned_neutrons_amount = 1 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # 3
