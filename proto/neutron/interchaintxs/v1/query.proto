syntax = "proto3";
package neutron.interchaintxs.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "neutron/interchaintxs/v1/params.proto";

option go_package = "github.com/neutron-org/neutron/v5/x/interchaintxs/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/neutron/interchaintxs/params";
  }
  rpc InterchainAccountAddress(QueryInterchainAccountAddressRequest) returns (QueryInterchainAccountAddressResponse) {
    option (google.api.http).get =
      "/neutron/interchaintxs/{owner_address}/{interchain_account_id}/"
      "{connection_id}/interchain_account_address";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryInterchainAccountAddressRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // owner_address is the owner of the interchain account on the controller
  // chain
  string owner_address = 1;
  // interchain_account_id is an identifier of your interchain account from
  // which you want to execute msgs
  string interchain_account_id = 2;
  // connection_id is an IBC connection identifier between Neutron and remote
  // chain
  string connection_id = 3;
}

// Query response for an interchain account address
message QueryInterchainAccountAddressResponse {
  // The corresponding interchain account address on the host chain
  string interchain_account_address = 1;
}
