syntax = "proto3";
package neutron.interchaintxs.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/api/http.proto";
import "google/protobuf/any.proto";
import "ibc/core/channel/v1/channel.proto";
import "neutron/feerefunder/fee.proto";
import "neutron/interchaintxs/v1/params.proto";

option go_package = "github.com/neutron-org/neutron/v5/x/interchaintxs/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc RegisterInterchainAccount(MsgRegisterInterchainAccount) returns (MsgRegisterInterchainAccountResponse) {}
  rpc SubmitTx(MsgSubmitTx) returns (MsgSubmitTxResponse) {}
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgRegisterInterchainAccount is used to register an account on a remote zone.
message MsgRegisterInterchainAccount {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "from_address";

  string from_address = 1;
  string connection_id = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
  string interchain_account_id = 3 [(gogoproto.moretags) = "yaml:\"interchain_account_id\""];
  repeated cosmos.base.v1beta1.Coin register_fee = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  ibc.core.channel.v1.Order ordering = 5;
}

// MsgRegisterInterchainAccountResponse is the response type for
// MsgRegisterInterchainAccount.
message MsgRegisterInterchainAccountResponse {
  option (gogoproto.goproto_getters) = false;

  string channel_id = 1;
  string port_id = 2;
}

// MsgSubmitTx defines the payload for Msg/SubmitTx
message MsgSubmitTx {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "from_address";

  string from_address = 1;
  // interchain_account_id is supposed to be the unique identifier, e.g.,
  // lido/kava. This allows contracts to have more than one interchain accounts
  // on remote zone This identifier will be a part of the portID that we'll
  // claim our capability for.
  string interchain_account_id = 2;
  string connection_id = 3;
  repeated google.protobuf.Any msgs = 4;
  string memo = 5;
  // timeout in seconds after which the packet times out
  uint64 timeout = 6;

  neutron.feerefunder.Fee fee = 7 [(gogoproto.nullable) = false];
}

// MsgSubmitTxResponse defines the response for Msg/SubmitTx
message MsgSubmitTxResponse {
  // channel's sequence_id for outgoing ibc packet. Unique per a channel.
  uint64 sequence_id = 1;
  // channel src channel on neutron side transaction was submitted from
  string channel = 2;
}

// MsgUpdateParams is the MsgUpdateParams request type.
//
// Since: 0.47
message MsgUpdateParams {
  option (amino.name) = "interchaintxs/MsgUpdateParams";
  option (cosmos.msg.v1.signer) = "authority";

  // Authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/interchaintxs parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: 0.47
message MsgUpdateParamsResponse {}
