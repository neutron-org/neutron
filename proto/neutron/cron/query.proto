syntax = "proto3";
package neutron.cron;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "neutron/cron/params.proto";
import "neutron/cron/schedule.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/neutron-org/neutron/v3/x/cron/types";

// Query defines the gRPC querier service.
service Query {
  // Queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/neutron/cron/params";
  }

  // Queries a Schedule by name.
  rpc Schedule(QueryGetScheduleRequest) returns (QueryGetScheduleResponse) {
    option (google.api.http).get = "/neutron/cron/schedule/{name}";
  }

  // Queries a list of Schedule items.
  rpc Schedules(QuerySchedulesRequest) returns (QuerySchedulesResponse) {
    option (google.api.http).get = "/neutron/cron/schedule";
  }

  // this line is used by starport scaffolding # 2
}

message QueryParamsRequest {}

message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetScheduleRequest {
  string name = 1;
}

message QueryGetScheduleResponse {
  Schedule schedule = 1 [(gogoproto.nullable) = false];
}

message QuerySchedulesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QuerySchedulesResponse {
  repeated Schedule schedules = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
