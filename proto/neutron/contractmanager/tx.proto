syntax = "proto3";
package neutron.contractmanager;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "neutron/contractmanager/params.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/neutron-org/neutron/v5/x/contractmanager/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc ResubmitFailure(MsgResubmitFailure) returns (MsgResubmitFailureResponse);

  // this line is used by starport scaffolding # proto/tx/rpc
}

// MsgUpdateParams is the MsgUpdateParams request type.
//
// Since: 0.47
message MsgUpdateParams {
  option (amino.name) = "contractmanager/MsgUpdateParams";
  option (cosmos.msg.v1.signer) = "authority";

  // Authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/contractmanager parameters to update.
  //
  // NOTE: All parameters must be supplied.
  contractmanager.Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: 0.47
message MsgUpdateParamsResponse {}

// MsgResubmitFailure - contract that has failed acknowledgement can resubmit its failure
message MsgResubmitFailure {
  option (amino.name) = "contractmanager/MsgResubmitFailure";
  option (cosmos.msg.v1.signer) = "sender";

  // sender is the contract which failure to acknowledge is resubmitted.
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // failure_id is id of failure to resubmit
  uint64 failure_id = 2;
}

message MsgResubmitFailureResponse {}
