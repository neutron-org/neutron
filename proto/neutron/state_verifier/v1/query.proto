syntax = "proto3";
package neutron.state_verifier.v1;

import "google/api/annotations.proto";
import "neutron/interchainqueries/tx.proto";
import "neutron/state_verifier/v1/genesis.proto";

option go_package = "github.com/neutron-org/neutron/v7/x/state-verifier/types";

service Query {
  // Verifies the values and returns an error if values cannot be verified. The query returns `QueryVerifyStateValuesResponse` response.
  rpc VerifyStateValues(QueryVerifyStateValuesRequest) returns (QueryVerifyStateValuesResponse) {
    option (google.api.http).get = "/neutron/state-verifier/v1/verify_state_values";
  }
  // Queries saved consensus state by the height. The query returns `QueryConsensusStateResponse` response.
  rpc QueryConsensusState(QueryConsensusStateRequest) returns (QueryConsensusStateResponse) {
    option (google.api.http).get = "/neutron/state-verifier/v1/query_consensus_state";
  }
}

// Describes a structure to verify storage values from the chain state from a particular height in the past
message QueryVerifyStateValuesRequest {
  // Refers to the block height to which the storage values belong.
  uint64 height = 1;
  // A slice of neutron.interchainqueries.StorageValue which relate to the specified height and must be verified against
  repeated neutron.interchainqueries.StorageValue storage_values = 2;
}

// Describes a response structure for `VerifyStateValues` query
message QueryVerifyStateValuesResponse {
  // The field describes a validity of all the storage values passed to the request at a specific height
  bool valid = 1;
}

// Describes a structure to query ConsensusState by the specified height
message QueryConsensusStateRequest {
  // Refers to the block height for which you want to query ConsensusState
  uint64 height = 1;
}

// Describes a response structure for `QueryConsensusStateRequest` query
message QueryConsensusStateResponse {
  // ConsensusState defines the consensus state from the state-verifier module
  neutron.state_verifier.v1.ConsensusState cs = 2;
}
