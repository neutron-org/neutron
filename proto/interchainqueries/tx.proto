syntax = "proto3";
package lidofinance.interchainadapter.interchainqueries;

import "tendermint/crypto/proof.proto";
import "tendermint/abci/types.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/lidofinance/interchain-adapter/x/interchainqueries/types";

// Msg defines the Msg service.
service Msg {
  rpc RegisterInterchainQuery(MsgRegisterInterchainQuery)
      returns (MsgRegisterInterchainQueryResponse);
  rpc SubmitQueryResult(MsgSubmitQueryResult)
      returns (MsgSubmitQueryResultResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

// this line is used by starport scaffolding # proto/tx/message

message MsgRegisterInterchainQuery {
  string query_data = 1;
  string query_type = 2;
  string zone_id = 3;
  string connection_id = 4;
  uint64 update_period = 5;
  string sender = 6;
}

message MsgRegisterInterchainQueryResponse { uint64 id = 1; }

message MsgSubmitQueryResult {
  uint64 query_id = 1;
  string sender = 2;
  QueryResult result = 3;
}

message QueryResult {
  repeated StorageValue kv_results = 1;
  repeated TxValue txs = 2;
  uint64 height = 3;
}

message StorageValue {
  string storage_prefix = 1;
  bytes key = 2;
  bytes value = 3;

  tendermint.crypto.ProofOps Proof = 4;
}

message TxValue {
  tendermint.abci.ResponseDeliverTx tx = 1;
  MerkleProof delivery_proof = 2;
  MerkleProof inclusion_proof = 3;
  uint64 height = 4;
}

message MerkleProof {
  int64 total = 1;
  int64 index = 2;
  bytes leaf_hash = 3;
  repeated bytes aunts = 4;
}

message MsgSubmitQueryResultResponse {

}

